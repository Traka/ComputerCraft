-- load the API
os.loadAPI("ocs/apis/sensor")


-- wrap the sensor
ener = sensor.wrap("top")

--local variables
local base1 = "-2,0,"
local base2 = "-2,-2,"
local total = 0
local percentage = 0
local previousPercentage = 0
local motorsRunning = true

--functions

function round(num, idp)
  local mult = 10^(idp or 0)
  return math.floor(num * mult + 0.5) / mult
end

--main logic

while true do
	term.clear()
	term.setCursorPos(1,1)
	total = 0
	for i=2,-7,-1 do
		local name = base1 .. i
		local moreDetails = ener.getTargetDetails(name)
		local energy = moreDetails["EnergyStored"]
		local energyPer
		energyPer = (energy / 600000) * 100
		--print(name, " : " , energyPer , "% loaded")
		total = total + energyPer
		local name = base2 .. i
		local moreDetails = ener.getTargetDetails(name)
		local energy = moreDetails["EnergyStored"]
		local energyPer
		energyPer = (energy / 600000) * 100
		--print(name, " : " , energyPer , "% loaded")
		total = total + energyPer
	end

	--print("Total : " , total)
	percentage = total / 20
	print("Energy level : " , round(percentage,2) , "%")
	local diff = percentage - previousPercentage
	--print ("Difference : " , diff)	
	previousPercentage = percentage

	if percentage > 80 then 
		redstone.setOutput("left",true)
		--print("Motors off")
		motorsRunning = false
	else	
		redstone.setOutput("left",false)
		--print("Motors on")
		motorsRunning = true
	end
	
	if motorsRunning then
		if diff < 0.37 then
			print ("Motors Jamming")
		else
			print ("Motors are running fine")
		end
	end
	sleep (60)
end


--[[

-2,0,2
-2,0,1
-2,0,0
-2,0,-1
-2,0,-2
-2,0,-3
-2,0,-4
-2,0,-5
-2,0,-6
-2,0,-7
-2,-2,2
-2,-2,1
-2,-2,0
-2,-2,-1
-2,-2,-2
-2,-2,-3
-2,-2,-4
-2,-2,-5
-2,-2,-6
-2,-2,-7

--]]



